package encryptiontest;

import org.junit.Test;

public class teamProject_AES {

	//Original Key
	public static int[][] originalKey = {{0x00,0x01,0x02,0x03},{0x04,0x05,0x06,0x07},
			{0x08,0x09,0x0a,0x0b},{0x0c,0x0d,0x0e,0x0f}};
	
	public static String SBox = "63 7c 77 7b f2 6b 6f c5 30 01 67 2b fe d7 ab 76 ca 82 c9 7d fa 59 47 f0 ad d4 a2 af 9c a4 72 c0 b7 fd 93 26 36 3f f7 cc 34 a5 e5 f1 71 d8 31 15 04 c7 23 c3 18 96 05 9a 07 12 80 e2 eb 27 b2 75 09 83 2c 1a 1b 6e 5a a0 52 3b d6 b3 29 e3 2f 08 53 d1 00 ed 20 fc b1 5b 6a cb be 39 4a 4c 58 cf d0 ef aa fb 43 4d 33 85 45 f9 02 7f 50 3c 9f a8 51 a3 40 8f 92 9d 38 f5 bc b6 da 21 10 ff f3 d2 cd 0c 13 ec 5f 97 44 17 c4 a7 7e 3d 64 5d 19 73 60 81 4f dc 22 2a 90 88 46 ee b8 14 de 5e 0b db e0 32 3a 0a 49 06 24 5c c2 d3 ac 62 91 95 e4 79 e7 c8 37 6d 8d d5 4e a9 6c 56 f4 ea 65 7a ae 08 ba 78 25 2e 1c a6 b4 c6 e8 dd 74 1f 4b bd 8b 8a 70 3e b5 66 48 03 f6 0e 61 35 57 b9 86 c1 1d 9e e1 f8 98 11 69 d9 8e 94 9b 1e 87 e9 ce 55 28 df 8c a1 89 0d bf e6 42 68 41 99 2d 0f b0 54 bb 16";
	
	public int getSBox(int row, int column){
		String [] str = SBox.split(" ");
		int[] SBox_int = new int[str.length];
		for(int i = 0; i < str.length; i++){
			SBox_int[i] = Integer.decode("0x".concat(str[i]));
		}
		int[][] SBox = new int[16][16];
		for(int i = 0; i < SBox_int.length; i++){
			SBox[i/16][i%16] = SBox_int[i];
		}
		return SBox[row][column];
	}
	
	//Update keys for each round
	public int[][] getKey(int i){
		int[][] key = new int[4][4];
		int[][] keyBef = originalKey;
		for(int r = 1; r <= i; r++){
			for(int j = 0; j < 4; j ++){
			key[0][j] = keyBef[0][j]^T(keyBef,r,j);
			key[1][j] = keyBef[1][j]^key[0][j];
			key[2][j] = keyBef[2][j]^key[1][j];
			key[3][j] = keyBef[3][j]^key[2][j];
		}
			keyBef = key;
		}
		return key;
	}
	
	//T method for T[(4i - 1)]
	public int T(int[][] W, int r, int j){
		// 1
		int tmpMatrix[] = new int[4];
		for(int i = 0; i < 4; i++){
			tmpMatrix[i] = W[3][i];
		}
		// 2
		int tmp = tmpMatrix[0];
		for(int i = 0; i < 3; i++){
			tmpMatrix[i] = tmpMatrix[i+1];
		}
		tmpMatrix[3] = tmp;
		// 3
		for(int i = 0; i < tmpMatrix.length; i++){
			tmpMatrix[i] = getSBox(tmpMatrix[i]/16,tmpMatrix[i]%16);
		}
		// 4
		int Ri = 0;
		switch(r){
		case 1: Ri = 1;
		break;
		case 2: Ri = 2;
		break;
		case 3: Ri = 4;
		break;
		case 4: Ri = 8;
		break;
		}
		// 56
		tmpMatrix[0] = tmpMatrix[0]^Ri;
		
		switch(j){
		case 0: return tmpMatrix[0];
		case 1: return tmpMatrix[1];
		case 2: return tmpMatrix[2];
		case 3: return tmpMatrix[3];
		}
		return 0;
	}
	
	
	//The method of matrix multiplication
	public static int[][] matrixMult(int[][] a, int[][]b){
		if(a.length != b[0].length) return null;
		int[][]resultMatrix = new int[a.length][b[0].length];
		for(int i = 0; i < a.length; i++){
			for(int j = 0,m = 0; m < a.length; m += (j+1)/a.length, j++, j = j%a.length){
				resultMatrix[i][m] += a[i][j] * b[j][m];		
			}
		}
		return resultMatrix;
	}
	
	//The method of BS
	public int[][] BS(){
		return null;
	}
	
	//The method of SR
	public int[][] SR(){
		return null;
	}
	
	//The method of MS
	public int[][] MC(){
		return null;
	}
	
	//The method of ARK
	public int[][] ARK(){
		return null;
	}
	
	
	@Test
	public void test1(){
		int[][] a = {{0,1,2},{1,2,3},{2,3,4}};
		int[][] b = {{0,1,2},{1,2,3},{2,3,4}};
		int[][]c = matrixMult(a,b);
		for(int i = 0; i < c.length; i++){
			for(int j = 0; j < c[i].length; j++){
				System.out.print(c[i][j] + " ");
			}
		}
	}
	@Test
	public void test2(){
		System.out.print("1+1");
	}
	
	@Test
	public void test3(){
		int [][]keyTest = getKey(10);
		for(int i = 0; i < keyTest.length; i++){
			for(int j = 0; j < keyTest[0].length; j++){
				System.out.print(keyTest[i][j] + " ");
			}
		}
	}
	
	
}
